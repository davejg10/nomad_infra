name: deploy-nomad-infra
run-name: Terraform deploy ${{ github.event.inputs.app_name }} in ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        options: 
          - dev
          - test
          # - prod
      app_name:
        type: choice
        description: Application name
        options: 
          - nomad-backend
    
env:
 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
 ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
 ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
 ARM_USE_AZUREAD: true
 work_dir: ./iac

permissions:
  id-token: write
  contents: read

jobs:
  terraform_plan:
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ${{ env.work_dir }}
    steps:
      - uses: actions/checkout@v4

      - name: Get backup snapshot name
        run: |
          NEO4J_DATADISK_SUFFIX="neo4j-datadisk"
          NEO4J_DISK_SNAPSHOT_NAME="null"
          snapshot_list_find_latest=$(az snapshot list -g rg-dev-uks-backup-snapshots --query "[?contains(creationData.sourceResourceId, "$NEO4J_DATADISK_SUFFIX")] | sort_by(@, &timeCreated)[-1].name" --output json)
          if [[ -z "$snapshot_list_find_latest" ]]; then
              NEO4J_DISK_SNAPSHOT_NAME=$snapshot_find
          fi


          # # Check if VM exists, if it does we dont need to restore from backup
          # NEO4J_VM_ID=$(az vm show --name <vm-name> --resource-group <resource-group-name> --query "id" --output tsv)
          # if [[ -z "$VM_ID" ]]; then
          #     echo "VM does not exist."
          #     neo4j_disk_snapshot_name=$(az snapshot list -g rg-dev-uks-backup-snapshots --query "[?contains(creationData.sourceResourceId, 'neo4j-datadisk')] | sort_by(@, &timeCreated)[-1].name" --output json)
          # else
          #     echo "VM exists: $VM_ID"
          # fi
          echo "NEO4J_DISK_SNAPSHOT_NAME=$NEO4J_DISK_SNAPSHOT_NAME" >> $GITHUB_ENV
          echo "NEO4J_DATADISK_SUFFIX=$NEO4J_DATADISK_SUFFIX" >> $GITHUB_ENV

      
      - name: Terraform plan
        uses: davejg10/pipeline_templates/.github/actions/terraform_plan@v1
        with:
          backend_azure_resource_group_name: ${{ vars.backend_azure_resource_group_name }}
          backend_azure_storage_account_name: ${{ vars.backend_azure_storage_account_name }}
          backend_container_name: ${{ github.event.inputs.app_name }}
          environment: ${{ github.event.inputs.environment }}
          work_dir: ${{ env.work_dir }}
          additional_tf_vars: -var "neo4j_disk_snapshot_name=${{ env.NEO4J_DISK_SNAPSHOT_NAME }}" "neo4j_datadisk_suffix=${{ env.NEO4J_DATADISK_SUFFIX }}"
      
  terraform_apply:
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
    needs: terraform_plan
    defaults:
      run:
        working-directory: ${{ env.work_dir }}
    steps:
      - uses: actions/checkout@v4

      - name: Terraform apply
        uses: davejg10/pipeline_templates/.github/actions/terraform_apply@v1
        with:
          backend_azure_resource_group_name: ${{ vars.backend_azure_resource_group_name }}
          backend_azure_storage_account_name: ${{ vars.backend_azure_storage_account_name }}
          backend_container_name: ${{ github.event.inputs.app_name }}
          work_dir: ${{ env.work_dir }}